/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface CollectionFactoryInterface extends utils.Interface {
  functions: {
    'COLLECTION_CREATOR_ROLE()': FunctionFragment;
    'COLLECTION_MANAGER_ROLE()': FunctionFragment;
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'META_TX_FORWARDER()': FunctionFragment;
    'auction()': FunctionFragment;
    'freeport()': FunctionFragment;
    'getGlobalNftId(uint32)': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'isTrustedForwarder(address)': FunctionFragment;
    'marketplace()': FunctionFragment;
    'nftAttachment()': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'upgradeTo(address)': FunctionFragment;
    'upgradeToAndCall(address,bytes)': FunctionFragment;
    'initialize(address,address,address,address)': FunctionFragment;
    'initialize_update(address,address,address,address)': FunctionFragment;
    'createCollection(address,string,string,string)': FunctionFragment;
    'mintOnBehalf(address,address,uint64,bytes)': FunctionFragment;
    'parseNftId(uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'COLLECTION_CREATOR_ROLE',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'COLLECTION_MANAGER_ROLE',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'META_TX_FORWARDER',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'auction', values?: undefined): string;
  encodeFunctionData(functionFragment: 'freeport', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getGlobalNftId',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getRoleAdmin',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'isTrustedForwarder',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'marketplace',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'nftAttachment',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: 'upgradeTo', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize_update',
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'createCollection',
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'mintOnBehalf',
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'parseNftId',
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: 'COLLECTION_CREATOR_ROLE',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'COLLECTION_MANAGER_ROLE',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'META_TX_FORWARDER',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'auction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'freeport', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getGlobalNftId',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRoleAdmin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isTrustedForwarder',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'marketplace',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'nftAttachment',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceRole',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'upgradeToAndCall',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'initialize_update',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'createCollection',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'mintOnBehalf',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'parseNftId', data: BytesLike): Result;

  events: {
    'AdminChanged(address,address)': EventFragment;
    'BeaconUpgraded(address)': EventFragment;
    'CollectionCreated(string,address)': EventFragment;
    'MintOnBehalf(address,address,address,uint256,uint64)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'Upgraded(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollectionCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MintOnBehalf'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type CollectionCreatedEvent = TypedEvent<
  [string, string],
  { name: string; addr: string }
>;

export type CollectionCreatedEventFilter =
  TypedEventFilter<CollectionCreatedEvent>;

export type MintOnBehalfEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    _operator: string;
    _collection: string;
    _holder: string;
    _id: BigNumber;
    _amount: BigNumber;
  }
>;

export type MintOnBehalfEventFilter = TypedEventFilter<MintOnBehalfEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface CollectionFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CollectionFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Collection creator role.  Used for configuring the amounts and beneficiaries of royalties on primary and secondary transfers of this NFT.
     */
    COLLECTION_CREATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Collection creator role.  Used for configuring the amounts and beneficiaries of royalties on primary and secondary transfers of this NFT.
     */
    'COLLECTION_CREATOR_ROLE()'(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Allowance mapping for mint on behalf for each Collection.
     */
    COLLECTION_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Allowance mapping for mint on behalf for each Collection.
     */
    'COLLECTION_MANAGER_ROLE()'(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<[string]>;

    META_TX_FORWARDER(overrides?: CallOverrides): Promise<[string]>;

    'META_TX_FORWARDER()'(overrides?: CallOverrides): Promise<[string]>;

    auction(overrides?: CallOverrides): Promise<[string]>;

    'auction()'(overrides?: CallOverrides): Promise<[string]>;

    freeport(overrides?: CallOverrides): Promise<[string]>;

    'freeport()'(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Calculate the global ID of an NFT type, identifying its inner nft id.
     */
    getGlobalNftId(
      innerNftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Calculate the global ID of an NFT type, identifying its inner nft id.
     */
    'getGlobalNftId(uint32)'(
      innerNftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    'getRoleAdmin(bytes32)'(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'grantRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    'hasRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    'isTrustedForwarder(address)'(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    marketplace(overrides?: CallOverrides): Promise<[string]>;

    'marketplace()'(overrides?: CallOverrides): Promise<[string]>;

    nftAttachment(overrides?: CallOverrides): Promise<[string]>;

    'nftAttachment()'(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    'renounceRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'revokeRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * See {IERC165-supportsInterface}.
     */
    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'upgradeTo(address)'(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'upgradeToAndCall(address,bytes)'(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _freeport: string,
      _nftAttachment: string,
      _marketplace: string,
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'initialize(address,address,address,address)'(
      _freeport: string,
      _nftAttachment: string,
      _marketplace: string,
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize_update(
      _freeport: string,
      _nftAttachment: string,
      _marketplace: string,
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'initialize_update(address,address,address,address)'(
      _freeport: string,
      _nftAttachment: string,
      _marketplace: string,
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Deploying a new user collection.  Emits a {CollectionCreated} event.
     */
    createCollection(
      collectionManager: string,
      name: string,
      uriTpl: string,
      contractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Deploying a new user collection.  Emits a {CollectionCreated} event.
     */
    'createCollection(address,string,string,string)'(
      collectionManager: string,
      name: string,
      uriTpl: string,
      contractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintOnBehalf(
      collection: string,
      holder: string,
      supply: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'mintOnBehalf(address,address,uint64,bytes)'(
      collection: string,
      holder: string,
      supply: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    parseNftId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber] & {
        collection: string;
        innerId: number;
        supply: BigNumber;
      }
    >;

    'parseNftId(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber] & {
        collection: string;
        innerId: number;
        supply: BigNumber;
      }
    >;
  };

  /**
   * Collection creator role.  Used for configuring the amounts and beneficiaries of royalties on primary and secondary transfers of this NFT.
   */
  COLLECTION_CREATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  /**
   * Collection creator role.  Used for configuring the amounts and beneficiaries of royalties on primary and secondary transfers of this NFT.
   */
  'COLLECTION_CREATOR_ROLE()'(overrides?: CallOverrides): Promise<string>;

  /**
   * Allowance mapping for mint on behalf for each Collection.
   */
  COLLECTION_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  /**
   * Allowance mapping for mint on behalf for each Collection.
   */
  'COLLECTION_MANAGER_ROLE()'(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<string>;

  META_TX_FORWARDER(overrides?: CallOverrides): Promise<string>;

  'META_TX_FORWARDER()'(overrides?: CallOverrides): Promise<string>;

  auction(overrides?: CallOverrides): Promise<string>;

  'auction()'(overrides?: CallOverrides): Promise<string>;

  freeport(overrides?: CallOverrides): Promise<string>;

  'freeport()'(overrides?: CallOverrides): Promise<string>;

  /**
   * Calculate the global ID of an NFT type, identifying its inner nft id.
   */
  getGlobalNftId(
    innerNftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Calculate the global ID of an NFT type, identifying its inner nft id.
   */
  'getGlobalNftId(uint32)'(
    innerNftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  'getRoleAdmin(bytes32)'(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  'grantRole(bytes32,address)'(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  'hasRole(bytes32,address)'(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  'isTrustedForwarder(address)'(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  marketplace(overrides?: CallOverrides): Promise<string>;

  'marketplace()'(overrides?: CallOverrides): Promise<string>;

  nftAttachment(overrides?: CallOverrides): Promise<string>;

  'nftAttachment()'(overrides?: CallOverrides): Promise<string>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  'renounceRole(bytes32,address)'(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  'revokeRole(bytes32,address)'(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC165-supportsInterface}.
   */
  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * See {IERC165-supportsInterface}.
   */
  'supportsInterface(bytes4)'(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'upgradeTo(address)'(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'upgradeToAndCall(address,bytes)'(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _freeport: string,
    _nftAttachment: string,
    _marketplace: string,
    _auction: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'initialize(address,address,address,address)'(
    _freeport: string,
    _nftAttachment: string,
    _marketplace: string,
    _auction: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize_update(
    _freeport: string,
    _nftAttachment: string,
    _marketplace: string,
    _auction: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'initialize_update(address,address,address,address)'(
    _freeport: string,
    _nftAttachment: string,
    _marketplace: string,
    _auction: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Deploying a new user collection.  Emits a {CollectionCreated} event.
   */
  createCollection(
    collectionManager: string,
    name: string,
    uriTpl: string,
    contractURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Deploying a new user collection.  Emits a {CollectionCreated} event.
   */
  'createCollection(address,string,string,string)'(
    collectionManager: string,
    name: string,
    uriTpl: string,
    contractURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintOnBehalf(
    collection: string,
    holder: string,
    supply: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'mintOnBehalf(address,address,uint64,bytes)'(
    collection: string,
    holder: string,
    supply: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  parseNftId(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber] & {
      collection: string;
      innerId: number;
      supply: BigNumber;
    }
  >;

  'parseNftId(uint256)'(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber] & {
      collection: string;
      innerId: number;
      supply: BigNumber;
    }
  >;

  callStatic: {
    /**
     * Collection creator role.  Used for configuring the amounts and beneficiaries of royalties on primary and secondary transfers of this NFT.
     */
    COLLECTION_CREATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    /**
     * Collection creator role.  Used for configuring the amounts and beneficiaries of royalties on primary and secondary transfers of this NFT.
     */
    'COLLECTION_CREATOR_ROLE()'(overrides?: CallOverrides): Promise<string>;

    /**
     * Allowance mapping for mint on behalf for each Collection.
     */
    COLLECTION_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    /**
     * Allowance mapping for mint on behalf for each Collection.
     */
    'COLLECTION_MANAGER_ROLE()'(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<string>;

    META_TX_FORWARDER(overrides?: CallOverrides): Promise<string>;

    'META_TX_FORWARDER()'(overrides?: CallOverrides): Promise<string>;

    auction(overrides?: CallOverrides): Promise<string>;

    'auction()'(overrides?: CallOverrides): Promise<string>;

    freeport(overrides?: CallOverrides): Promise<string>;

    'freeport()'(overrides?: CallOverrides): Promise<string>;

    /**
     * Calculate the global ID of an NFT type, identifying its inner nft id.
     */
    getGlobalNftId(
      innerNftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Calculate the global ID of an NFT type, identifying its inner nft id.
     */
    'getGlobalNftId(uint32)'(
      innerNftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    'getRoleAdmin(bytes32)'(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'grantRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    'hasRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'isTrustedForwarder(address)'(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    marketplace(overrides?: CallOverrides): Promise<string>;

    'marketplace()'(overrides?: CallOverrides): Promise<string>;

    nftAttachment(overrides?: CallOverrides): Promise<string>;

    'nftAttachment()'(overrides?: CallOverrides): Promise<string>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    'renounceRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'revokeRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * See {IERC165-supportsInterface}.
     */
    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'upgradeTo(address)'(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    'upgradeToAndCall(address,bytes)'(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _freeport: string,
      _nftAttachment: string,
      _marketplace: string,
      _auction: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'initialize(address,address,address,address)'(
      _freeport: string,
      _nftAttachment: string,
      _marketplace: string,
      _auction: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize_update(
      _freeport: string,
      _nftAttachment: string,
      _marketplace: string,
      _auction: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'initialize_update(address,address,address,address)'(
      _freeport: string,
      _nftAttachment: string,
      _marketplace: string,
      _auction: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Deploying a new user collection.  Emits a {CollectionCreated} event.
     */
    createCollection(
      collectionManager: string,
      name: string,
      uriTpl: string,
      contractURI: string,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Deploying a new user collection.  Emits a {CollectionCreated} event.
     */
    'createCollection(address,string,string,string)'(
      collectionManager: string,
      name: string,
      uriTpl: string,
      contractURI: string,
      overrides?: CallOverrides
    ): Promise<string>;

    mintOnBehalf(
      collection: string,
      holder: string,
      supply: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    'mintOnBehalf(address,address,uint64,bytes)'(
      collection: string,
      holder: string,
      supply: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    parseNftId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber] & {
        collection: string;
        innerId: number;
        supply: BigNumber;
      }
    >;

    'parseNftId(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber] & {
        collection: string;
        innerId: number;
        supply: BigNumber;
      }
    >;
  };

  filters: {
    'AdminChanged(address,address)'(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    'BeaconUpgraded(address)'(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    'CollectionCreated(string,address)'(
      name?: null,
      addr?: string | null
    ): CollectionCreatedEventFilter;
    CollectionCreated(
      name?: null,
      addr?: string | null
    ): CollectionCreatedEventFilter;

    'MintOnBehalf(address,address,address,uint256,uint64)'(
      _operator?: null,
      _collection?: null,
      _holder?: null,
      _id?: null,
      _amount?: null
    ): MintOnBehalfEventFilter;
    MintOnBehalf(
      _operator?: null,
      _collection?: null,
      _holder?: null,
      _id?: null,
      _amount?: null
    ): MintOnBehalfEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    'Upgraded(address)'(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    /**
     * Collection creator role.  Used for configuring the amounts and beneficiaries of royalties on primary and secondary transfers of this NFT.
     */
    COLLECTION_CREATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Collection creator role.  Used for configuring the amounts and beneficiaries of royalties on primary and secondary transfers of this NFT.
     */
    'COLLECTION_CREATOR_ROLE()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allowance mapping for mint on behalf for each Collection.
     */
    COLLECTION_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allowance mapping for mint on behalf for each Collection.
     */
    'COLLECTION_MANAGER_ROLE()'(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<BigNumber>;

    META_TX_FORWARDER(overrides?: CallOverrides): Promise<BigNumber>;

    'META_TX_FORWARDER()'(overrides?: CallOverrides): Promise<BigNumber>;

    auction(overrides?: CallOverrides): Promise<BigNumber>;

    'auction()'(overrides?: CallOverrides): Promise<BigNumber>;

    freeport(overrides?: CallOverrides): Promise<BigNumber>;

    'freeport()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Calculate the global ID of an NFT type, identifying its inner nft id.
     */
    getGlobalNftId(
      innerNftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Calculate the global ID of an NFT type, identifying its inner nft id.
     */
    'getGlobalNftId(uint32)'(
      innerNftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    'getRoleAdmin(bytes32)'(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'grantRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    'hasRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'isTrustedForwarder(address)'(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketplace(overrides?: CallOverrides): Promise<BigNumber>;

    'marketplace()'(overrides?: CallOverrides): Promise<BigNumber>;

    nftAttachment(overrides?: CallOverrides): Promise<BigNumber>;

    'nftAttachment()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    'renounceRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'revokeRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC165-supportsInterface}.
     */
    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'upgradeTo(address)'(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'upgradeToAndCall(address,bytes)'(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _freeport: string,
      _nftAttachment: string,
      _marketplace: string,
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'initialize(address,address,address,address)'(
      _freeport: string,
      _nftAttachment: string,
      _marketplace: string,
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize_update(
      _freeport: string,
      _nftAttachment: string,
      _marketplace: string,
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'initialize_update(address,address,address,address)'(
      _freeport: string,
      _nftAttachment: string,
      _marketplace: string,
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Deploying a new user collection.  Emits a {CollectionCreated} event.
     */
    createCollection(
      collectionManager: string,
      name: string,
      uriTpl: string,
      contractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Deploying a new user collection.  Emits a {CollectionCreated} event.
     */
    'createCollection(address,string,string,string)'(
      collectionManager: string,
      name: string,
      uriTpl: string,
      contractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintOnBehalf(
      collection: string,
      holder: string,
      supply: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'mintOnBehalf(address,address,uint64,bytes)'(
      collection: string,
      holder: string,
      supply: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    parseNftId(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'parseNftId(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Collection creator role.  Used for configuring the amounts and beneficiaries of royalties on primary and secondary transfers of this NFT.
     */
    COLLECTION_CREATOR_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Collection creator role.  Used for configuring the amounts and beneficiaries of royalties on primary and secondary transfers of this NFT.
     */
    'COLLECTION_CREATOR_ROLE()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allowance mapping for mint on behalf for each Collection.
     */
    COLLECTION_MANAGER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allowance mapping for mint on behalf for each Collection.
     */
    'COLLECTION_MANAGER_ROLE()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'DEFAULT_ADMIN_ROLE()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    META_TX_FORWARDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'META_TX_FORWARDER()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'auction()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    freeport(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'freeport()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Calculate the global ID of an NFT type, identifying its inner nft id.
     */
    getGlobalNftId(
      innerNftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Calculate the global ID of an NFT type, identifying its inner nft id.
     */
    'getGlobalNftId(uint32)'(
      innerNftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    'getRoleAdmin(bytes32)'(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'grantRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    'hasRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'isTrustedForwarder(address)'(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketplace(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'marketplace()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftAttachment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'nftAttachment()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    'renounceRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'revokeRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC165-supportsInterface}.
     */
    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'upgradeTo(address)'(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'upgradeToAndCall(address,bytes)'(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _freeport: string,
      _nftAttachment: string,
      _marketplace: string,
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'initialize(address,address,address,address)'(
      _freeport: string,
      _nftAttachment: string,
      _marketplace: string,
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize_update(
      _freeport: string,
      _nftAttachment: string,
      _marketplace: string,
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'initialize_update(address,address,address,address)'(
      _freeport: string,
      _nftAttachment: string,
      _marketplace: string,
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Deploying a new user collection.  Emits a {CollectionCreated} event.
     */
    createCollection(
      collectionManager: string,
      name: string,
      uriTpl: string,
      contractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Deploying a new user collection.  Emits a {CollectionCreated} event.
     */
    'createCollection(address,string,string,string)'(
      collectionManager: string,
      name: string,
      uriTpl: string,
      contractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintOnBehalf(
      collection: string,
      holder: string,
      supply: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'mintOnBehalf(address,address,uint64,bytes)'(
      collection: string,
      holder: string,
      supply: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    parseNftId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'parseNftId(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
