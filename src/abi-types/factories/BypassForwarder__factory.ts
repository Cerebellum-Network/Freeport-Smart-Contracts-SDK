/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  BypassForwarder,
  BypassForwarderInterface,
} from '../BypassForwarder';

const _abi = [
  {
    inputs: [],
    name: 'BYPASS_SENDER',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'from',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'to',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'value',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'gas',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'nonce',
            type: 'uint256',
          },
          {
            internalType: 'bytes',
            name: 'data',
            type: 'bytes',
          },
        ],
        internalType: 'struct MinimalForwarder.ForwardRequest',
        name: 'req',
        type: 'tuple',
      },
      {
        internalType: 'bytes',
        name: 'signature',
        type: 'bytes',
      },
    ],
    name: 'execute',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
    ],
    name: 'getNonce',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'from',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'to',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'value',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'gas',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'nonce',
            type: 'uint256',
          },
          {
            internalType: 'bytes',
            name: 'data',
            type: 'bytes',
          },
        ],
        internalType: 'struct MinimalForwarder.ForwardRequest',
        name: 'req',
        type: 'tuple',
      },
      {
        internalType: 'bytes',
        name: 'signature',
        type: 'bytes',
      },
    ],
    name: 'verify',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x61012060405234801561001157600080fd5b50604080518082018252601081526f26b4b734b6b0b62337b93bb0b93232b960811b6020808301918252835180850185526005815264302e302e3160d81b908201529151902060c08181527fae209a0b48f21c054280f2455d32cf309387644879d9acbd8ffc19916381188560e08190524660a081815286517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818801819052818901969096526060810193909352608080840192909252308382015286518084039091018152919092019094528351939092019290922090526101005260805160a05160c05160e05161010051610b026101336000396000610658015260006106a701526000610682015260006106060152600061062f0152610b026000f3fe60806040526004361061003f5760003560e01c80632d0335ab14610044578063448588e31461008d57806347153f82146100af578063bf5d3bdb146100d0575b600080fd5b34801561005057600080fd5b5061007a61005f366004610886565b6001600160a01b031660009081526020819052604090205490565b6040519081526020015b60405180910390f35b34801561009957600080fd5b5061007a600080516020610aad83398151915281565b6100c26100bd3660046108cd565b610100565b6040516100849291906109b1565b3480156100dc57600080fd5b506100f06100eb3660046108cd565b6102ad565b6040519015158152602001610084565b6000606061010f8585856102ad565b61017b5760405162461bcd60e51b815260206004820152603260248201527f4d696e696d616c466f727761726465723a207369676e617475726520646f6573604482015271081b9bdd081b585d18da081c995c5d595cdd60721b60648201526084015b60405180910390fd5b61018a60808601356001610a38565b60008061019a6020890189610886565b6001600160a01b03166001600160a01b03168152602001908152602001600020819055506000808660200160208101906101d49190610886565b6001600160a01b0316606088013560408901356101f460a08b018b6109ed565b61020160208d018d610886565b60405160200161021393929190610974565b60408051601f198184030181529082905261022d91610995565b600060405180830381858888f193505050503d806000811461026b576040519150601f19603f3d011682016040523d82523d6000602084013e610270565b606091505b509092509050610285603f6060890135610a5c565b5a116102a157634e487b7160e01b600052600160045260246000fd5b90969095509350505050565b6000806102c06040860160208701610886565b604051632474521560e21b8152600080516020610aad83398151915260048201523360248201529091506000906001600160a01b038316906391d148549060440160206040518083038186803b15801561031957600080fd5b505afa15801561032d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035191906108ad565b90508061036357600092505050610373565b61036e86868661037a565b925050505b9392505050565b60008061048d84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061048792507fdd8f4b70b0f4393e889bd39128a30628a78b61816a9eb8199759e7a349657e4891506103ea905060208a018a610886565b6103fa60408b0160208c01610886565b60408b013560608c013560808d013561041660a08f018f6109ed565b604051610424929190610964565b6040805191829003822060208301989098526001600160a01b0396871690820152949093166060850152608084019190915260a083015260c082015260e081019190915261010001604051602081830303815290604052805190602001206104f8565b9061054c565b905060808501356000806104a46020890189610886565b6001600160a01b03166001600160a01b03168152602001908152602001600020541480156104ef57506104da6020860186610886565b6001600160a01b0316816001600160a01b0316145b95945050505050565b6000610546610505610602565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b6000806000808451604114156105765750505060208201516040830151606084015160001a6105ec565b8451604014156105a45750505060408201516020830151906001600160ff1b0381169060ff1c601b016105ec565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610172565b6105f8868285856106f5565b9695505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000046141561065157507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b60006fa2a8918ca85bafe22016d0b997e4df60600160ff1b038211156107685760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610172565b8360ff16601b148061077d57508360ff16601c145b6107d45760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610172565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015610828573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166104ef5760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610172565b600060208284031215610897578081fd5b81356001600160a01b0381168114610373578182fd5b6000602082840312156108be578081fd5b81518015158114610373578182fd5b6000806000604084860312156108e1578182fd5b83356001600160401b03808211156108f7578384fd5b9085019060c0828803121561090a578384fd5b9093506020850135908082111561091f578384fd5b818601915086601f830112610932578384fd5b813581811115610940578485fd5b876020828501011115610951578485fd5b6020830194508093505050509250925092565b8183823760009101908152919050565b8284823760609190911b6001600160601b0319169101908152601401919050565b600082516109a7818460208701610a7c565b9190910192915050565b821515815260406020820152600082518060408401526109d8816060850160208701610a7c565b601f01601f1916919091016060019392505050565b6000808335601e19843603018112610a03578283fd5b8301803591506001600160401b03821115610a1c578283fd5b602001915036819003821315610a3157600080fd5b9250929050565b60008219821115610a5757634e487b7160e01b81526011600452602481fd5b500190565b600082610a7757634e487b7160e01b81526012600452602481fd5b500490565b60005b83811015610a97578181015183820152602001610a7f565b83811115610aa6576000848401525b5050505056fe20a4be6e7127e439f48d6654377d19402cb883dd85029e600de9e17052f903d3a2646970667358221220229578d482e9961b79febb1d0eb131b42e698304173fb34bf4f51862737d5f3a64736f6c63430008040033';

type BypassForwarderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BypassForwarderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BypassForwarder__factory extends ContractFactory {
  constructor(...args: BypassForwarderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BypassForwarder> {
    return super.deploy(overrides || {}) as Promise<BypassForwarder>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BypassForwarder {
    return super.attach(address) as BypassForwarder;
  }
  connect(signer: Signer): BypassForwarder__factory {
    return super.connect(signer) as BypassForwarder__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BypassForwarderInterface {
    return new utils.Interface(_abi) as BypassForwarderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BypassForwarder {
    return new Contract(address, _abi, signerOrProvider) as BypassForwarder;
  }
}
