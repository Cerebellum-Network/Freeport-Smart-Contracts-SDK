/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface FiatGatewayInterface extends utils.Interface {
  functions: {
    'CURRENCY()': FunctionFragment;
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'EXCHANGE_RATE_ORACLE()': FunctionFragment;
    'PAYMENT_SERVICE()': FunctionFragment;
    'freeport()': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'totalCereUnitsSent()': FunctionFragment;
    'totalPenniesReceived()': FunctionFragment;
    'setExchangeRate(uint256)': FunctionFragment;
    'getExchangeRate()': FunctionFragment;
    'withdraw()': FunctionFragment;
    'buyCereFromUsd(uint256,address,uint256)': FunctionFragment;
    'buyNftFromUsd(uint256,address,address,uint256,uint256,uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'CURRENCY', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'EXCHANGE_RATE_ORACLE',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'PAYMENT_SERVICE',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'freeport', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getRoleAdmin',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'totalCereUnitsSent',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'totalPenniesReceived',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setExchangeRate',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getExchangeRate',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'buyCereFromUsd',
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'buyNftFromUsd',
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: 'CURRENCY', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'EXCHANGE_RATE_ORACLE',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'PAYMENT_SERVICE',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'freeport', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getRoleAdmin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceRole',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalCereUnitsSent',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalPenniesReceived',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setExchangeRate',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getExchangeRate',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'buyCereFromUsd',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'buyNftFromUsd',
    data: BytesLike
  ): Result;

  events: {
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'SetExchangeRate(uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetExchangeRate'): EventFragment;
}

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type SetExchangeRateEvent = TypedEvent<
  [BigNumber],
  { cereUnitsPerPenny: BigNumber }
>;

export type SetExchangeRateEventFilter = TypedEventFilter<SetExchangeRateEvent>;

export interface FiatGateway extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FiatGatewayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * The token ID that represents the CERE currency for all payments in this contract.
     */
    CURRENCY(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * The token ID that represents the CERE currency for all payments in this contract.
     */
    'CURRENCY()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<[string]>;

    EXCHANGE_RATE_ORACLE(overrides?: CallOverrides): Promise<[string]>;

    'EXCHANGE_RATE_ORACLE()'(overrides?: CallOverrides): Promise<[string]>;

    PAYMENT_SERVICE(overrides?: CallOverrides): Promise<[string]>;

    'PAYMENT_SERVICE()'(overrides?: CallOverrides): Promise<[string]>;

    freeport(overrides?: CallOverrides): Promise<[string]>;

    'freeport()'(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    'getRoleAdmin(bytes32)'(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'grantRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    'hasRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    'renounceRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'revokeRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * See {IERC165-supportsInterface}.
     */
    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * How many CERE Units were sold so far.
     */
    totalCereUnitsSent(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * How many CERE Units were sold so far.
     */
    'totalCereUnitsSent()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * How many USD cents were received so far, according to the payment service.
     */
    totalPenniesReceived(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * How many USD cents were received so far, according to the payment service.
     */
    'totalPenniesReceived()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Set the exchange rate between fiat (USD) and Freeport currency (CERE). The rate is given as number of CERE Units (with 10 decimals) per USD cent (1 penny). Only the rate service with the EXCHANGE_RATE_ORACLE role can change the rate.
     */
    setExchangeRate(
      _cereUnitsPerPenny: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set the exchange rate between fiat (USD) and Freeport currency (CERE). The rate is given as number of CERE Units (with 10 decimals) per USD cent (1 penny). Only the rate service with the EXCHANGE_RATE_ORACLE role can change the rate.
     */
    'setExchangeRate(uint256)'(
      _cereUnitsPerPenny: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the current exchange rate in CERE Units (with 10 decimals) per USD cent (1 penny).
     */
    getExchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Get the current exchange rate in CERE Units (with 10 decimals) per USD cent (1 penny).
     */
    'getExchangeRate()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Withdraw all CERE from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Withdraw all CERE from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    'withdraw()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Obtain CERE based on a fiat payment. The amount of fiat is recorded, and exchanged for an amount of CERE. Only the gateway with PAYMENT_SERVICE role can report successful payments.
     */
    buyCereFromUsd(
      penniesReceived: BigNumberish,
      buyer: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Obtain CERE based on a fiat payment. The amount of fiat is recorded, and exchanged for an amount of CERE. Only the gateway with PAYMENT_SERVICE role can report successful payments.
     */
    'buyCereFromUsd(uint256,address,uint256)'(
      penniesReceived: BigNumberish,
      buyer: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Obtain CERE and buy an NFT based on a fiat payment. CERE tokens are obtained in the same way as buyCereFromUsd. Then, the tokens are used to buy an NFT in the same transaction. The NFT must be available for sale from the seller in SimpleExchange. Only the gateway with PAYMENT_SERVICE role can report successful payments. The parameter expectedPriceOrZero can be used to validate the price that the buyer expects to pay. This prevents a race condition with makeOffer or setExchangeRate. Pass 0 to disable this validation and accept any current price.
     */
    buyNftFromUsd(
      penniesReceived: BigNumberish,
      buyer: string,
      seller: string,
      nftId: BigNumberish,
      expectedPriceOrZero: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Obtain CERE and buy an NFT based on a fiat payment. CERE tokens are obtained in the same way as buyCereFromUsd. Then, the tokens are used to buy an NFT in the same transaction. The NFT must be available for sale from the seller in SimpleExchange. Only the gateway with PAYMENT_SERVICE role can report successful payments. The parameter expectedPriceOrZero can be used to validate the price that the buyer expects to pay. This prevents a race condition with makeOffer or setExchangeRate. Pass 0 to disable this validation and accept any current price.
     */
    'buyNftFromUsd(uint256,address,address,uint256,uint256,uint256)'(
      penniesReceived: BigNumberish,
      buyer: string,
      seller: string,
      nftId: BigNumberish,
      expectedPriceOrZero: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * The token ID that represents the CERE currency for all payments in this contract.
   */
  CURRENCY(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * The token ID that represents the CERE currency for all payments in this contract.
   */
  'CURRENCY()'(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<string>;

  EXCHANGE_RATE_ORACLE(overrides?: CallOverrides): Promise<string>;

  'EXCHANGE_RATE_ORACLE()'(overrides?: CallOverrides): Promise<string>;

  PAYMENT_SERVICE(overrides?: CallOverrides): Promise<string>;

  'PAYMENT_SERVICE()'(overrides?: CallOverrides): Promise<string>;

  freeport(overrides?: CallOverrides): Promise<string>;

  'freeport()'(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  'getRoleAdmin(bytes32)'(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  'grantRole(bytes32,address)'(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  'hasRole(bytes32,address)'(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  'renounceRole(bytes32,address)'(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  'revokeRole(bytes32,address)'(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC165-supportsInterface}.
   */
  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * See {IERC165-supportsInterface}.
   */
  'supportsInterface(bytes4)'(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * How many CERE Units were sold so far.
   */
  totalCereUnitsSent(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * How many CERE Units were sold so far.
   */
  'totalCereUnitsSent()'(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * How many USD cents were received so far, according to the payment service.
   */
  totalPenniesReceived(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * How many USD cents were received so far, according to the payment service.
   */
  'totalPenniesReceived()'(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Set the exchange rate between fiat (USD) and Freeport currency (CERE). The rate is given as number of CERE Units (with 10 decimals) per USD cent (1 penny). Only the rate service with the EXCHANGE_RATE_ORACLE role can change the rate.
   */
  setExchangeRate(
    _cereUnitsPerPenny: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set the exchange rate between fiat (USD) and Freeport currency (CERE). The rate is given as number of CERE Units (with 10 decimals) per USD cent (1 penny). Only the rate service with the EXCHANGE_RATE_ORACLE role can change the rate.
   */
  'setExchangeRate(uint256)'(
    _cereUnitsPerPenny: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the current exchange rate in CERE Units (with 10 decimals) per USD cent (1 penny).
   */
  getExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get the current exchange rate in CERE Units (with 10 decimals) per USD cent (1 penny).
   */
  'getExchangeRate()'(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Withdraw all CERE from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
   */
  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Withdraw all CERE from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
   */
  'withdraw()'(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Obtain CERE based on a fiat payment. The amount of fiat is recorded, and exchanged for an amount of CERE. Only the gateway with PAYMENT_SERVICE role can report successful payments.
   */
  buyCereFromUsd(
    penniesReceived: BigNumberish,
    buyer: string,
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Obtain CERE based on a fiat payment. The amount of fiat is recorded, and exchanged for an amount of CERE. Only the gateway with PAYMENT_SERVICE role can report successful payments.
   */
  'buyCereFromUsd(uint256,address,uint256)'(
    penniesReceived: BigNumberish,
    buyer: string,
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Obtain CERE and buy an NFT based on a fiat payment. CERE tokens are obtained in the same way as buyCereFromUsd. Then, the tokens are used to buy an NFT in the same transaction. The NFT must be available for sale from the seller in SimpleExchange. Only the gateway with PAYMENT_SERVICE role can report successful payments. The parameter expectedPriceOrZero can be used to validate the price that the buyer expects to pay. This prevents a race condition with makeOffer or setExchangeRate. Pass 0 to disable this validation and accept any current price.
   */
  buyNftFromUsd(
    penniesReceived: BigNumberish,
    buyer: string,
    seller: string,
    nftId: BigNumberish,
    expectedPriceOrZero: BigNumberish,
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Obtain CERE and buy an NFT based on a fiat payment. CERE tokens are obtained in the same way as buyCereFromUsd. Then, the tokens are used to buy an NFT in the same transaction. The NFT must be available for sale from the seller in SimpleExchange. Only the gateway with PAYMENT_SERVICE role can report successful payments. The parameter expectedPriceOrZero can be used to validate the price that the buyer expects to pay. This prevents a race condition with makeOffer or setExchangeRate. Pass 0 to disable this validation and accept any current price.
   */
  'buyNftFromUsd(uint256,address,address,uint256,uint256,uint256)'(
    penniesReceived: BigNumberish,
    buyer: string,
    seller: string,
    nftId: BigNumberish,
    expectedPriceOrZero: BigNumberish,
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * The token ID that represents the CERE currency for all payments in this contract.
     */
    CURRENCY(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The token ID that represents the CERE currency for all payments in this contract.
     */
    'CURRENCY()'(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<string>;

    EXCHANGE_RATE_ORACLE(overrides?: CallOverrides): Promise<string>;

    'EXCHANGE_RATE_ORACLE()'(overrides?: CallOverrides): Promise<string>;

    PAYMENT_SERVICE(overrides?: CallOverrides): Promise<string>;

    'PAYMENT_SERVICE()'(overrides?: CallOverrides): Promise<string>;

    freeport(overrides?: CallOverrides): Promise<string>;

    'freeport()'(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    'getRoleAdmin(bytes32)'(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'grantRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    'hasRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    'renounceRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'revokeRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * See {IERC165-supportsInterface}.
     */
    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * How many CERE Units were sold so far.
     */
    totalCereUnitsSent(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * How many CERE Units were sold so far.
     */
    'totalCereUnitsSent()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * How many USD cents were received so far, according to the payment service.
     */
    totalPenniesReceived(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * How many USD cents were received so far, according to the payment service.
     */
    'totalPenniesReceived()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Set the exchange rate between fiat (USD) and Freeport currency (CERE). The rate is given as number of CERE Units (with 10 decimals) per USD cent (1 penny). Only the rate service with the EXCHANGE_RATE_ORACLE role can change the rate.
     */
    setExchangeRate(
      _cereUnitsPerPenny: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set the exchange rate between fiat (USD) and Freeport currency (CERE). The rate is given as number of CERE Units (with 10 decimals) per USD cent (1 penny). Only the rate service with the EXCHANGE_RATE_ORACLE role can change the rate.
     */
    'setExchangeRate(uint256)'(
      _cereUnitsPerPenny: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Get the current exchange rate in CERE Units (with 10 decimals) per USD cent (1 penny).
     */
    getExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the current exchange rate in CERE Units (with 10 decimals) per USD cent (1 penny).
     */
    'getExchangeRate()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Withdraw all CERE from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    withdraw(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Withdraw all CERE from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    'withdraw()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Obtain CERE based on a fiat payment. The amount of fiat is recorded, and exchanged for an amount of CERE. Only the gateway with PAYMENT_SERVICE role can report successful payments.
     */
    buyCereFromUsd(
      penniesReceived: BigNumberish,
      buyer: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Obtain CERE based on a fiat payment. The amount of fiat is recorded, and exchanged for an amount of CERE. Only the gateway with PAYMENT_SERVICE role can report successful payments.
     */
    'buyCereFromUsd(uint256,address,uint256)'(
      penniesReceived: BigNumberish,
      buyer: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Obtain CERE and buy an NFT based on a fiat payment. CERE tokens are obtained in the same way as buyCereFromUsd. Then, the tokens are used to buy an NFT in the same transaction. The NFT must be available for sale from the seller in SimpleExchange. Only the gateway with PAYMENT_SERVICE role can report successful payments. The parameter expectedPriceOrZero can be used to validate the price that the buyer expects to pay. This prevents a race condition with makeOffer or setExchangeRate. Pass 0 to disable this validation and accept any current price.
     */
    buyNftFromUsd(
      penniesReceived: BigNumberish,
      buyer: string,
      seller: string,
      nftId: BigNumberish,
      expectedPriceOrZero: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Obtain CERE and buy an NFT based on a fiat payment. CERE tokens are obtained in the same way as buyCereFromUsd. Then, the tokens are used to buy an NFT in the same transaction. The NFT must be available for sale from the seller in SimpleExchange. Only the gateway with PAYMENT_SERVICE role can report successful payments. The parameter expectedPriceOrZero can be used to validate the price that the buyer expects to pay. This prevents a race condition with makeOffer or setExchangeRate. Pass 0 to disable this validation and accept any current price.
     */
    'buyNftFromUsd(uint256,address,address,uint256,uint256,uint256)'(
      penniesReceived: BigNumberish,
      buyer: string,
      seller: string,
      nftId: BigNumberish,
      expectedPriceOrZero: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    'SetExchangeRate(uint256)'(
      cereUnitsPerPenny?: null
    ): SetExchangeRateEventFilter;
    SetExchangeRate(cereUnitsPerPenny?: null): SetExchangeRateEventFilter;
  };

  estimateGas: {
    /**
     * The token ID that represents the CERE currency for all payments in this contract.
     */
    CURRENCY(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The token ID that represents the CERE currency for all payments in this contract.
     */
    'CURRENCY()'(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<BigNumber>;

    EXCHANGE_RATE_ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    'EXCHANGE_RATE_ORACLE()'(overrides?: CallOverrides): Promise<BigNumber>;

    PAYMENT_SERVICE(overrides?: CallOverrides): Promise<BigNumber>;

    'PAYMENT_SERVICE()'(overrides?: CallOverrides): Promise<BigNumber>;

    freeport(overrides?: CallOverrides): Promise<BigNumber>;

    'freeport()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    'getRoleAdmin(bytes32)'(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'grantRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    'hasRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    'renounceRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'revokeRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC165-supportsInterface}.
     */
    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * How many CERE Units were sold so far.
     */
    totalCereUnitsSent(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * How many CERE Units were sold so far.
     */
    'totalCereUnitsSent()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * How many USD cents were received so far, according to the payment service.
     */
    totalPenniesReceived(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * How many USD cents were received so far, according to the payment service.
     */
    'totalPenniesReceived()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Set the exchange rate between fiat (USD) and Freeport currency (CERE). The rate is given as number of CERE Units (with 10 decimals) per USD cent (1 penny). Only the rate service with the EXCHANGE_RATE_ORACLE role can change the rate.
     */
    setExchangeRate(
      _cereUnitsPerPenny: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set the exchange rate between fiat (USD) and Freeport currency (CERE). The rate is given as number of CERE Units (with 10 decimals) per USD cent (1 penny). Only the rate service with the EXCHANGE_RATE_ORACLE role can change the rate.
     */
    'setExchangeRate(uint256)'(
      _cereUnitsPerPenny: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Get the current exchange rate in CERE Units (with 10 decimals) per USD cent (1 penny).
     */
    getExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the current exchange rate in CERE Units (with 10 decimals) per USD cent (1 penny).
     */
    'getExchangeRate()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Withdraw all CERE from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Withdraw all CERE from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    'withdraw()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Obtain CERE based on a fiat payment. The amount of fiat is recorded, and exchanged for an amount of CERE. Only the gateway with PAYMENT_SERVICE role can report successful payments.
     */
    buyCereFromUsd(
      penniesReceived: BigNumberish,
      buyer: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Obtain CERE based on a fiat payment. The amount of fiat is recorded, and exchanged for an amount of CERE. Only the gateway with PAYMENT_SERVICE role can report successful payments.
     */
    'buyCereFromUsd(uint256,address,uint256)'(
      penniesReceived: BigNumberish,
      buyer: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Obtain CERE and buy an NFT based on a fiat payment. CERE tokens are obtained in the same way as buyCereFromUsd. Then, the tokens are used to buy an NFT in the same transaction. The NFT must be available for sale from the seller in SimpleExchange. Only the gateway with PAYMENT_SERVICE role can report successful payments. The parameter expectedPriceOrZero can be used to validate the price that the buyer expects to pay. This prevents a race condition with makeOffer or setExchangeRate. Pass 0 to disable this validation and accept any current price.
     */
    buyNftFromUsd(
      penniesReceived: BigNumberish,
      buyer: string,
      seller: string,
      nftId: BigNumberish,
      expectedPriceOrZero: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Obtain CERE and buy an NFT based on a fiat payment. CERE tokens are obtained in the same way as buyCereFromUsd. Then, the tokens are used to buy an NFT in the same transaction. The NFT must be available for sale from the seller in SimpleExchange. Only the gateway with PAYMENT_SERVICE role can report successful payments. The parameter expectedPriceOrZero can be used to validate the price that the buyer expects to pay. This prevents a race condition with makeOffer or setExchangeRate. Pass 0 to disable this validation and accept any current price.
     */
    'buyNftFromUsd(uint256,address,address,uint256,uint256,uint256)'(
      penniesReceived: BigNumberish,
      buyer: string,
      seller: string,
      nftId: BigNumberish,
      expectedPriceOrZero: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * The token ID that represents the CERE currency for all payments in this contract.
     */
    CURRENCY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The token ID that represents the CERE currency for all payments in this contract.
     */
    'CURRENCY()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'DEFAULT_ADMIN_ROLE()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EXCHANGE_RATE_ORACLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'EXCHANGE_RATE_ORACLE()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAYMENT_SERVICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'PAYMENT_SERVICE()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freeport(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'freeport()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    'getRoleAdmin(bytes32)'(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'grantRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    'hasRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    'renounceRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'revokeRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC165-supportsInterface}.
     */
    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * How many CERE Units were sold so far.
     */
    totalCereUnitsSent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * How many CERE Units were sold so far.
     */
    'totalCereUnitsSent()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * How many USD cents were received so far, according to the payment service.
     */
    totalPenniesReceived(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * How many USD cents were received so far, according to the payment service.
     */
    'totalPenniesReceived()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Set the exchange rate between fiat (USD) and Freeport currency (CERE). The rate is given as number of CERE Units (with 10 decimals) per USD cent (1 penny). Only the rate service with the EXCHANGE_RATE_ORACLE role can change the rate.
     */
    setExchangeRate(
      _cereUnitsPerPenny: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set the exchange rate between fiat (USD) and Freeport currency (CERE). The rate is given as number of CERE Units (with 10 decimals) per USD cent (1 penny). Only the rate service with the EXCHANGE_RATE_ORACLE role can change the rate.
     */
    'setExchangeRate(uint256)'(
      _cereUnitsPerPenny: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the current exchange rate in CERE Units (with 10 decimals) per USD cent (1 penny).
     */
    getExchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get the current exchange rate in CERE Units (with 10 decimals) per USD cent (1 penny).
     */
    'getExchangeRate()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraw all CERE from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraw all CERE from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    'withdraw()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Obtain CERE based on a fiat payment. The amount of fiat is recorded, and exchanged for an amount of CERE. Only the gateway with PAYMENT_SERVICE role can report successful payments.
     */
    buyCereFromUsd(
      penniesReceived: BigNumberish,
      buyer: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Obtain CERE based on a fiat payment. The amount of fiat is recorded, and exchanged for an amount of CERE. Only the gateway with PAYMENT_SERVICE role can report successful payments.
     */
    'buyCereFromUsd(uint256,address,uint256)'(
      penniesReceived: BigNumberish,
      buyer: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Obtain CERE and buy an NFT based on a fiat payment. CERE tokens are obtained in the same way as buyCereFromUsd. Then, the tokens are used to buy an NFT in the same transaction. The NFT must be available for sale from the seller in SimpleExchange. Only the gateway with PAYMENT_SERVICE role can report successful payments. The parameter expectedPriceOrZero can be used to validate the price that the buyer expects to pay. This prevents a race condition with makeOffer or setExchangeRate. Pass 0 to disable this validation and accept any current price.
     */
    buyNftFromUsd(
      penniesReceived: BigNumberish,
      buyer: string,
      seller: string,
      nftId: BigNumberish,
      expectedPriceOrZero: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Obtain CERE and buy an NFT based on a fiat payment. CERE tokens are obtained in the same way as buyCereFromUsd. Then, the tokens are used to buy an NFT in the same transaction. The NFT must be available for sale from the seller in SimpleExchange. Only the gateway with PAYMENT_SERVICE role can report successful payments. The parameter expectedPriceOrZero can be used to validate the price that the buyer expects to pay. This prevents a race condition with makeOffer or setExchangeRate. Pass 0 to disable this validation and accept any current price.
     */
    'buyNftFromUsd(uint256,address,address,uint256,uint256,uint256)'(
      penniesReceived: BigNumberish,
      buyer: string,
      seller: string,
      nftId: BigNumberish,
      expectedPriceOrZero: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
