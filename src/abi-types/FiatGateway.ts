/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface FiatGatewayInterface extends utils.Interface {
  functions: {
    'CURRENCY()': FunctionFragment;
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'EXCHANGE_RATE_ORACLE()': FunctionFragment;
    'PAYMENT_SERVICE()': FunctionFragment;
    'freeport()': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)': FunctionFragment;
    'onERC1155Received(address,address,uint256,uint256,bytes)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'totalCereUnitsSent()': FunctionFragment;
    'totalPenniesReceived()': FunctionFragment;
    'upgradeTo(address)': FunctionFragment;
    'upgradeToAndCall(address,bytes)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'initialize_v2_0_0()': FunctionFragment;
    'setExchangeRate(uint256)': FunctionFragment;
    'getExchangeRate()': FunctionFragment;
    'withdrawERC20()': FunctionFragment;
    'withdrawCurrency()': FunctionFragment;
    'buyCereFromUsd(uint256,address,uint256)': FunctionFragment;
    'buyNftFromUsd(uint256,address,address,uint256,uint256,uint256,uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'CURRENCY', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'EXCHANGE_RATE_ORACLE',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'PAYMENT_SERVICE',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'freeport', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getRoleAdmin',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'onERC1155BatchReceived',
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'onERC1155Received',
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'totalCereUnitsSent',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'totalPenniesReceived',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'upgradeTo', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'initialize_v2_0_0',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setExchangeRate',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getExchangeRate',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawERC20',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawCurrency',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'buyCereFromUsd',
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'buyNftFromUsd',
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: 'CURRENCY', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'EXCHANGE_RATE_ORACLE',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'PAYMENT_SERVICE',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'freeport', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getRoleAdmin',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'onERC1155BatchReceived',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'onERC1155Received',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceRole',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'totalCereUnitsSent',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalPenniesReceived',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'upgradeToAndCall',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'initialize_v2_0_0',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setExchangeRate',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getExchangeRate',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawERC20',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawCurrency',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'buyCereFromUsd',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'buyNftFromUsd',
    data: BytesLike
  ): Result;

  events: {
    'AdminChanged(address,address)': EventFragment;
    'BeaconUpgraded(address)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'SetExchangeRate(uint256)': EventFragment;
    'Upgraded(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetExchangeRate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type SetExchangeRateEvent = TypedEvent<
  [BigNumber],
  { cereUnitsPerPenny: BigNumber }
>;

export type SetExchangeRateEventFilter = TypedEventFilter<SetExchangeRateEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface FiatGateway extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FiatGatewayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * The token ID that represents the CERE currency for all payments in this contract.
     */
    CURRENCY(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * The token ID that represents the CERE currency for all payments in this contract.
     */
    'CURRENCY()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<[string]>;

    EXCHANGE_RATE_ORACLE(overrides?: CallOverrides): Promise<[string]>;

    'EXCHANGE_RATE_ORACLE()'(overrides?: CallOverrides): Promise<[string]>;

    PAYMENT_SERVICE(overrides?: CallOverrides): Promise<[string]>;

    'PAYMENT_SERVICE()'(overrides?: CallOverrides): Promise<[string]>;

    freeport(overrides?: CallOverrides): Promise<[string]>;

    'freeport()'(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    'getRoleAdmin(bytes32)'(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'grantRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    'hasRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'onERC1155Received(address,address,uint256,uint256,bytes)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    'renounceRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'revokeRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Discontinued variable.
     */
    totalCereUnitsSent(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Discontinued variable.
     */
    'totalCereUnitsSent()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * How many USD cents were received so far, according to the payment service.
     */
    totalPenniesReceived(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * How many USD cents were received so far, according to the payment service.
     */
    'totalPenniesReceived()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'upgradeTo(address)'(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'upgradeToAndCall(address,bytes)'(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Supports interfaces of AccessControl and ERC1155Receiver.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Supports interfaces of AccessControl and ERC1155Receiver.
     */
    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _freeport: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'initialize(address)'(
      _freeport: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Initialize this contract after version 2.0.0. Allow deposit of USDC into Freeport.
     */
    initialize_v2_0_0(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Initialize this contract after version 2.0.0. Allow deposit of USDC into Freeport.
     */
    'initialize_v2_0_0()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set the exchange rate between fiat (USD) and Freeport currency (CERE). The rate is given as number of ERC20 Units (with 6 decimals) per USD cent (1 penny). Only the rate service with the EXCHANGE_RATE_ORACLE role can change the rate.
     */
    setExchangeRate(
      _cereUnitsPerPenny: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set the exchange rate between fiat (USD) and Freeport currency (CERE). The rate is given as number of ERC20 Units (with 6 decimals) per USD cent (1 penny). Only the rate service with the EXCHANGE_RATE_ORACLE role can change the rate.
     */
    'setExchangeRate(uint256)'(
      _cereUnitsPerPenny: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the current exchange rate in CERE Units (with 10 decimals) per USD cent (1 penny).
     */
    getExchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Get the current exchange rate in CERE Units (with 10 decimals) per USD cent (1 penny).
     */
    'getExchangeRate()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Withdraw all ERC20 from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    withdrawERC20(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Withdraw all ERC20 from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    'withdrawERC20()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Deprecated. Only ERC20 is relevant. Withdraw all internal currency from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    withdrawCurrency(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Deprecated. Only ERC20 is relevant. Withdraw all internal currency from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    'withdrawCurrency()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Discontinued function, return an error.
     */
    buyCereFromUsd(
      penniesReceived: BigNumberish,
      buyer: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Discontinued function, return an error.
     */
    'buyCereFromUsd(uint256,address,uint256)'(
      penniesReceived: BigNumberish,
      buyer: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Buy an NFT based on an off-chain fiat payment. The amount of fiat received is validated against the NFT price, using the configured exchange rate. Then, the tokens are used to buy an NFT in the same transaction. The NFT must be available for sale from the seller in SimpleExchange. Only the gateway with PAYMENT_SERVICE role can report successful payments. The parameter expectedPriceOrZero can be used to validate the price that the buyer expects to pay. This prevents a race condition with makeOffer or setExchangeRate. Pass 0 to disable this validation and accept any current price. The parameter nonce is ignored and accepted for compatibility.
     */
    buyNftFromUsd(
      penniesReceived: BigNumberish,
      buyer: string,
      seller: string,
      nftId: BigNumberish,
      quantity: BigNumberish,
      expectedPriceOrZero: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Buy an NFT based on an off-chain fiat payment. The amount of fiat received is validated against the NFT price, using the configured exchange rate. Then, the tokens are used to buy an NFT in the same transaction. The NFT must be available for sale from the seller in SimpleExchange. Only the gateway with PAYMENT_SERVICE role can report successful payments. The parameter expectedPriceOrZero can be used to validate the price that the buyer expects to pay. This prevents a race condition with makeOffer or setExchangeRate. Pass 0 to disable this validation and accept any current price. The parameter nonce is ignored and accepted for compatibility.
     */
    'buyNftFromUsd(uint256,address,address,uint256,uint256,uint256,uint256)'(
      penniesReceived: BigNumberish,
      buyer: string,
      seller: string,
      nftId: BigNumberish,
      quantity: BigNumberish,
      expectedPriceOrZero: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * The token ID that represents the CERE currency for all payments in this contract.
   */
  CURRENCY(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * The token ID that represents the CERE currency for all payments in this contract.
   */
  'CURRENCY()'(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<string>;

  EXCHANGE_RATE_ORACLE(overrides?: CallOverrides): Promise<string>;

  'EXCHANGE_RATE_ORACLE()'(overrides?: CallOverrides): Promise<string>;

  PAYMENT_SERVICE(overrides?: CallOverrides): Promise<string>;

  'PAYMENT_SERVICE()'(overrides?: CallOverrides): Promise<string>;

  freeport(overrides?: CallOverrides): Promise<string>;

  'freeport()'(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  'getRoleAdmin(bytes32)'(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  'grantRole(bytes32,address)'(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  'hasRole(bytes32,address)'(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)'(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'onERC1155Received(address,address,uint256,uint256,bytes)'(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  'renounceRole(bytes32,address)'(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  'revokeRole(bytes32,address)'(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Discontinued variable.
   */
  totalCereUnitsSent(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Discontinued variable.
   */
  'totalCereUnitsSent()'(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * How many USD cents were received so far, according to the payment service.
   */
  totalPenniesReceived(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * How many USD cents were received so far, according to the payment service.
   */
  'totalPenniesReceived()'(overrides?: CallOverrides): Promise<BigNumber>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'upgradeTo(address)'(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'upgradeToAndCall(address,bytes)'(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Supports interfaces of AccessControl and ERC1155Receiver.
   */
  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Supports interfaces of AccessControl and ERC1155Receiver.
   */
  'supportsInterface(bytes4)'(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _freeport: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'initialize(address)'(
    _freeport: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Initialize this contract after version 2.0.0. Allow deposit of USDC into Freeport.
   */
  initialize_v2_0_0(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Initialize this contract after version 2.0.0. Allow deposit of USDC into Freeport.
   */
  'initialize_v2_0_0()'(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set the exchange rate between fiat (USD) and Freeport currency (CERE). The rate is given as number of ERC20 Units (with 6 decimals) per USD cent (1 penny). Only the rate service with the EXCHANGE_RATE_ORACLE role can change the rate.
   */
  setExchangeRate(
    _cereUnitsPerPenny: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set the exchange rate between fiat (USD) and Freeport currency (CERE). The rate is given as number of ERC20 Units (with 6 decimals) per USD cent (1 penny). Only the rate service with the EXCHANGE_RATE_ORACLE role can change the rate.
   */
  'setExchangeRate(uint256)'(
    _cereUnitsPerPenny: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the current exchange rate in CERE Units (with 10 decimals) per USD cent (1 penny).
   */
  getExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Get the current exchange rate in CERE Units (with 10 decimals) per USD cent (1 penny).
   */
  'getExchangeRate()'(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Withdraw all ERC20 from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
   */
  withdrawERC20(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Withdraw all ERC20 from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
   */
  'withdrawERC20()'(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Deprecated. Only ERC20 is relevant. Withdraw all internal currency from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
   */
  withdrawCurrency(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Deprecated. Only ERC20 is relevant. Withdraw all internal currency from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
   */
  'withdrawCurrency()'(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Discontinued function, return an error.
   */
  buyCereFromUsd(
    penniesReceived: BigNumberish,
    buyer: string,
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Discontinued function, return an error.
   */
  'buyCereFromUsd(uint256,address,uint256)'(
    penniesReceived: BigNumberish,
    buyer: string,
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Buy an NFT based on an off-chain fiat payment. The amount of fiat received is validated against the NFT price, using the configured exchange rate. Then, the tokens are used to buy an NFT in the same transaction. The NFT must be available for sale from the seller in SimpleExchange. Only the gateway with PAYMENT_SERVICE role can report successful payments. The parameter expectedPriceOrZero can be used to validate the price that the buyer expects to pay. This prevents a race condition with makeOffer or setExchangeRate. Pass 0 to disable this validation and accept any current price. The parameter nonce is ignored and accepted for compatibility.
   */
  buyNftFromUsd(
    penniesReceived: BigNumberish,
    buyer: string,
    seller: string,
    nftId: BigNumberish,
    quantity: BigNumberish,
    expectedPriceOrZero: BigNumberish,
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Buy an NFT based on an off-chain fiat payment. The amount of fiat received is validated against the NFT price, using the configured exchange rate. Then, the tokens are used to buy an NFT in the same transaction. The NFT must be available for sale from the seller in SimpleExchange. Only the gateway with PAYMENT_SERVICE role can report successful payments. The parameter expectedPriceOrZero can be used to validate the price that the buyer expects to pay. This prevents a race condition with makeOffer or setExchangeRate. Pass 0 to disable this validation and accept any current price. The parameter nonce is ignored and accepted for compatibility.
   */
  'buyNftFromUsd(uint256,address,address,uint256,uint256,uint256,uint256)'(
    penniesReceived: BigNumberish,
    buyer: string,
    seller: string,
    nftId: BigNumberish,
    quantity: BigNumberish,
    expectedPriceOrZero: BigNumberish,
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * The token ID that represents the CERE currency for all payments in this contract.
     */
    CURRENCY(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The token ID that represents the CERE currency for all payments in this contract.
     */
    'CURRENCY()'(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<string>;

    EXCHANGE_RATE_ORACLE(overrides?: CallOverrides): Promise<string>;

    'EXCHANGE_RATE_ORACLE()'(overrides?: CallOverrides): Promise<string>;

    PAYMENT_SERVICE(overrides?: CallOverrides): Promise<string>;

    'PAYMENT_SERVICE()'(overrides?: CallOverrides): Promise<string>;

    freeport(overrides?: CallOverrides): Promise<string>;

    'freeport()'(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    'getRoleAdmin(bytes32)'(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'grantRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    'hasRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    'onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    'onERC1155Received(address,address,uint256,uint256,bytes)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    'renounceRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'revokeRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Discontinued variable.
     */
    totalCereUnitsSent(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Discontinued variable.
     */
    'totalCereUnitsSent()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * How many USD cents were received so far, according to the payment service.
     */
    totalPenniesReceived(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * How many USD cents were received so far, according to the payment service.
     */
    'totalPenniesReceived()'(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'upgradeTo(address)'(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    'upgradeToAndCall(address,bytes)'(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Supports interfaces of AccessControl and ERC1155Receiver.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Supports interfaces of AccessControl and ERC1155Receiver.
     */
    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(_freeport: string, overrides?: CallOverrides): Promise<void>;

    'initialize(address)'(
      _freeport: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Initialize this contract after version 2.0.0. Allow deposit of USDC into Freeport.
     */
    initialize_v2_0_0(overrides?: CallOverrides): Promise<void>;

    /**
     * Initialize this contract after version 2.0.0. Allow deposit of USDC into Freeport.
     */
    'initialize_v2_0_0()'(overrides?: CallOverrides): Promise<void>;

    /**
     * Set the exchange rate between fiat (USD) and Freeport currency (CERE). The rate is given as number of ERC20 Units (with 6 decimals) per USD cent (1 penny). Only the rate service with the EXCHANGE_RATE_ORACLE role can change the rate.
     */
    setExchangeRate(
      _cereUnitsPerPenny: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set the exchange rate between fiat (USD) and Freeport currency (CERE). The rate is given as number of ERC20 Units (with 6 decimals) per USD cent (1 penny). Only the rate service with the EXCHANGE_RATE_ORACLE role can change the rate.
     */
    'setExchangeRate(uint256)'(
      _cereUnitsPerPenny: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Get the current exchange rate in CERE Units (with 10 decimals) per USD cent (1 penny).
     */
    getExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the current exchange rate in CERE Units (with 10 decimals) per USD cent (1 penny).
     */
    'getExchangeRate()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Withdraw all ERC20 from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    withdrawERC20(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Withdraw all ERC20 from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    'withdrawERC20()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Deprecated. Only ERC20 is relevant. Withdraw all internal currency from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    withdrawCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Deprecated. Only ERC20 is relevant. Withdraw all internal currency from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    'withdrawCurrency()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Discontinued function, return an error.
     */
    buyCereFromUsd(
      penniesReceived: BigNumberish,
      buyer: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Discontinued function, return an error.
     */
    'buyCereFromUsd(uint256,address,uint256)'(
      penniesReceived: BigNumberish,
      buyer: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Buy an NFT based on an off-chain fiat payment. The amount of fiat received is validated against the NFT price, using the configured exchange rate. Then, the tokens are used to buy an NFT in the same transaction. The NFT must be available for sale from the seller in SimpleExchange. Only the gateway with PAYMENT_SERVICE role can report successful payments. The parameter expectedPriceOrZero can be used to validate the price that the buyer expects to pay. This prevents a race condition with makeOffer or setExchangeRate. Pass 0 to disable this validation and accept any current price. The parameter nonce is ignored and accepted for compatibility.
     */
    buyNftFromUsd(
      penniesReceived: BigNumberish,
      buyer: string,
      seller: string,
      nftId: BigNumberish,
      quantity: BigNumberish,
      expectedPriceOrZero: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Buy an NFT based on an off-chain fiat payment. The amount of fiat received is validated against the NFT price, using the configured exchange rate. Then, the tokens are used to buy an NFT in the same transaction. The NFT must be available for sale from the seller in SimpleExchange. Only the gateway with PAYMENT_SERVICE role can report successful payments. The parameter expectedPriceOrZero can be used to validate the price that the buyer expects to pay. This prevents a race condition with makeOffer or setExchangeRate. Pass 0 to disable this validation and accept any current price. The parameter nonce is ignored and accepted for compatibility.
     */
    'buyNftFromUsd(uint256,address,address,uint256,uint256,uint256,uint256)'(
      penniesReceived: BigNumberish,
      buyer: string,
      seller: string,
      nftId: BigNumberish,
      quantity: BigNumberish,
      expectedPriceOrZero: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'AdminChanged(address,address)'(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    'BeaconUpgraded(address)'(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    'SetExchangeRate(uint256)'(
      cereUnitsPerPenny?: null
    ): SetExchangeRateEventFilter;
    SetExchangeRate(cereUnitsPerPenny?: null): SetExchangeRateEventFilter;

    'Upgraded(address)'(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    /**
     * The token ID that represents the CERE currency for all payments in this contract.
     */
    CURRENCY(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The token ID that represents the CERE currency for all payments in this contract.
     */
    'CURRENCY()'(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<BigNumber>;

    EXCHANGE_RATE_ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    'EXCHANGE_RATE_ORACLE()'(overrides?: CallOverrides): Promise<BigNumber>;

    PAYMENT_SERVICE(overrides?: CallOverrides): Promise<BigNumber>;

    'PAYMENT_SERVICE()'(overrides?: CallOverrides): Promise<BigNumber>;

    freeport(overrides?: CallOverrides): Promise<BigNumber>;

    'freeport()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    'getRoleAdmin(bytes32)'(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'grantRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    'hasRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'onERC1155Received(address,address,uint256,uint256,bytes)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    'renounceRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'revokeRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Discontinued variable.
     */
    totalCereUnitsSent(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Discontinued variable.
     */
    'totalCereUnitsSent()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * How many USD cents were received so far, according to the payment service.
     */
    totalPenniesReceived(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * How many USD cents were received so far, according to the payment service.
     */
    'totalPenniesReceived()'(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'upgradeTo(address)'(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'upgradeToAndCall(address,bytes)'(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Supports interfaces of AccessControl and ERC1155Receiver.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Supports interfaces of AccessControl and ERC1155Receiver.
     */
    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _freeport: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'initialize(address)'(
      _freeport: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Initialize this contract after version 2.0.0. Allow deposit of USDC into Freeport.
     */
    initialize_v2_0_0(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Initialize this contract after version 2.0.0. Allow deposit of USDC into Freeport.
     */
    'initialize_v2_0_0()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set the exchange rate between fiat (USD) and Freeport currency (CERE). The rate is given as number of ERC20 Units (with 6 decimals) per USD cent (1 penny). Only the rate service with the EXCHANGE_RATE_ORACLE role can change the rate.
     */
    setExchangeRate(
      _cereUnitsPerPenny: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set the exchange rate between fiat (USD) and Freeport currency (CERE). The rate is given as number of ERC20 Units (with 6 decimals) per USD cent (1 penny). Only the rate service with the EXCHANGE_RATE_ORACLE role can change the rate.
     */
    'setExchangeRate(uint256)'(
      _cereUnitsPerPenny: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Get the current exchange rate in CERE Units (with 10 decimals) per USD cent (1 penny).
     */
    getExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the current exchange rate in CERE Units (with 10 decimals) per USD cent (1 penny).
     */
    'getExchangeRate()'(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Withdraw all ERC20 from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    withdrawERC20(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Withdraw all ERC20 from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    'withdrawERC20()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Deprecated. Only ERC20 is relevant. Withdraw all internal currency from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    withdrawCurrency(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Deprecated. Only ERC20 is relevant. Withdraw all internal currency from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    'withdrawCurrency()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Discontinued function, return an error.
     */
    buyCereFromUsd(
      penniesReceived: BigNumberish,
      buyer: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Discontinued function, return an error.
     */
    'buyCereFromUsd(uint256,address,uint256)'(
      penniesReceived: BigNumberish,
      buyer: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Buy an NFT based on an off-chain fiat payment. The amount of fiat received is validated against the NFT price, using the configured exchange rate. Then, the tokens are used to buy an NFT in the same transaction. The NFT must be available for sale from the seller in SimpleExchange. Only the gateway with PAYMENT_SERVICE role can report successful payments. The parameter expectedPriceOrZero can be used to validate the price that the buyer expects to pay. This prevents a race condition with makeOffer or setExchangeRate. Pass 0 to disable this validation and accept any current price. The parameter nonce is ignored and accepted for compatibility.
     */
    buyNftFromUsd(
      penniesReceived: BigNumberish,
      buyer: string,
      seller: string,
      nftId: BigNumberish,
      quantity: BigNumberish,
      expectedPriceOrZero: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Buy an NFT based on an off-chain fiat payment. The amount of fiat received is validated against the NFT price, using the configured exchange rate. Then, the tokens are used to buy an NFT in the same transaction. The NFT must be available for sale from the seller in SimpleExchange. Only the gateway with PAYMENT_SERVICE role can report successful payments. The parameter expectedPriceOrZero can be used to validate the price that the buyer expects to pay. This prevents a race condition with makeOffer or setExchangeRate. Pass 0 to disable this validation and accept any current price. The parameter nonce is ignored and accepted for compatibility.
     */
    'buyNftFromUsd(uint256,address,address,uint256,uint256,uint256,uint256)'(
      penniesReceived: BigNumberish,
      buyer: string,
      seller: string,
      nftId: BigNumberish,
      quantity: BigNumberish,
      expectedPriceOrZero: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * The token ID that represents the CERE currency for all payments in this contract.
     */
    CURRENCY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The token ID that represents the CERE currency for all payments in this contract.
     */
    'CURRENCY()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'DEFAULT_ADMIN_ROLE()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EXCHANGE_RATE_ORACLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'EXCHANGE_RATE_ORACLE()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAYMENT_SERVICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'PAYMENT_SERVICE()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freeport(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'freeport()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    'getRoleAdmin(bytes32)'(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'grantRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    'hasRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'onERC1155Received(address,address,uint256,uint256,bytes)'(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    'renounceRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    'revokeRole(bytes32,address)'(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Discontinued variable.
     */
    totalCereUnitsSent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Discontinued variable.
     */
    'totalCereUnitsSent()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * How many USD cents were received so far, according to the payment service.
     */
    totalPenniesReceived(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * How many USD cents were received so far, according to the payment service.
     */
    'totalPenniesReceived()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'upgradeTo(address)'(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'upgradeToAndCall(address,bytes)'(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Supports interfaces of AccessControl and ERC1155Receiver.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Supports interfaces of AccessControl and ERC1155Receiver.
     */
    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _freeport: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'initialize(address)'(
      _freeport: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Initialize this contract after version 2.0.0. Allow deposit of USDC into Freeport.
     */
    initialize_v2_0_0(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Initialize this contract after version 2.0.0. Allow deposit of USDC into Freeport.
     */
    'initialize_v2_0_0()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set the exchange rate between fiat (USD) and Freeport currency (CERE). The rate is given as number of ERC20 Units (with 6 decimals) per USD cent (1 penny). Only the rate service with the EXCHANGE_RATE_ORACLE role can change the rate.
     */
    setExchangeRate(
      _cereUnitsPerPenny: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set the exchange rate between fiat (USD) and Freeport currency (CERE). The rate is given as number of ERC20 Units (with 6 decimals) per USD cent (1 penny). Only the rate service with the EXCHANGE_RATE_ORACLE role can change the rate.
     */
    'setExchangeRate(uint256)'(
      _cereUnitsPerPenny: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the current exchange rate in CERE Units (with 10 decimals) per USD cent (1 penny).
     */
    getExchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get the current exchange rate in CERE Units (with 10 decimals) per USD cent (1 penny).
     */
    'getExchangeRate()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraw all ERC20 from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    withdrawERC20(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraw all ERC20 from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    'withdrawERC20()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Deprecated. Only ERC20 is relevant. Withdraw all internal currency from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    withdrawCurrency(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Deprecated. Only ERC20 is relevant. Withdraw all internal currency from this contract. Only accounts with DEFAULT_ADMIN_ROLE can withdraw.
     */
    'withdrawCurrency()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Discontinued function, return an error.
     */
    buyCereFromUsd(
      penniesReceived: BigNumberish,
      buyer: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Discontinued function, return an error.
     */
    'buyCereFromUsd(uint256,address,uint256)'(
      penniesReceived: BigNumberish,
      buyer: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Buy an NFT based on an off-chain fiat payment. The amount of fiat received is validated against the NFT price, using the configured exchange rate. Then, the tokens are used to buy an NFT in the same transaction. The NFT must be available for sale from the seller in SimpleExchange. Only the gateway with PAYMENT_SERVICE role can report successful payments. The parameter expectedPriceOrZero can be used to validate the price that the buyer expects to pay. This prevents a race condition with makeOffer or setExchangeRate. Pass 0 to disable this validation and accept any current price. The parameter nonce is ignored and accepted for compatibility.
     */
    buyNftFromUsd(
      penniesReceived: BigNumberish,
      buyer: string,
      seller: string,
      nftId: BigNumberish,
      quantity: BigNumberish,
      expectedPriceOrZero: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Buy an NFT based on an off-chain fiat payment. The amount of fiat received is validated against the NFT price, using the configured exchange rate. Then, the tokens are used to buy an NFT in the same transaction. The NFT must be available for sale from the seller in SimpleExchange. Only the gateway with PAYMENT_SERVICE role can report successful payments. The parameter expectedPriceOrZero can be used to validate the price that the buyer expects to pay. This prevents a race condition with makeOffer or setExchangeRate. Pass 0 to disable this validation and accept any current price. The parameter nonce is ignored and accepted for compatibility.
     */
    'buyNftFromUsd(uint256,address,address,uint256,uint256,uint256,uint256)'(
      penniesReceived: BigNumberish,
      buyer: string,
      seller: string,
      nftId: BigNumberish,
      quantity: BigNumberish,
      expectedPriceOrZero: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
